spring.application.name=springboot-playground

# H2 Database url : jdbc:h2:mem:7b9a400f-99f7-4657-9d51-2954057d74a9 (See the logs AFTER running the application)

# Connect to the H2 Database which is running at this url
spring.h2.console.enabled = true

# Open this -> http://localhost:8080/h2-console
# Paste the dynamically generated url in "JDBC URL" tag
# NOTE - URL here is always incorrect, make sure that you check this already present url

# Dynamic URL -> you need to keep changing it at restart each time

# Configure a static URL :-
spring.datasource.url = jdbc:h2:mem:demoDB

spring.datasource.initialization-mode=always

# ----------------------------------
spring.jpa.hibernate.ddl-auto=create

# Spring Boot, by default, uses Hibernate as the JPA implementation, and Hibernate can automatically handle schema generation for your database.
# However, this behavior depends on the spring.jpa.hibernate.ddl-auto property in application.properties or application.yml.

# Common values for spring.jpa.hibernate.ddl-auto are:

# create: Drops and recreates the schema on startup.
# update: Updates the schema without dropping it.
# validate: Validates the schema against your entity mappings.
# none: Disables schema management.
# If this property is set to none or left undefined in certain cases, Hibernate won't create or manage the database schema.
# You must then define it manually, often using schema.sql.

# ----------------------------------

# Do NOT worry about the queries.
# Just MAP Entities to Tables.
spring.jpa.show-sql = true

# As you can see in console -> EntityManager 1st checks that there is not row with specific id and only then it would insert.