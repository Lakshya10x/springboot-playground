spring.application.name=springboot-playground
logging.level.org.springframework = debug

# Auto-Configuration :-
#    Spring Boot provides default Auto-Configuration, however you can also override that by providing own configuration.
#
#    Auto-Configuration = Automated confighuration for your application.
#    Decided based on :
#    1. which framework (In pom.xml the starter projects brings lot of frameworks) are in the Class Path ?
#    2. What is the existing configuration (Annotations etc) ?
#
#    All Auto-Configuration logic is defined in specific JAR : Maven Dependencies / External Libraries -> spring-boot-auto-configuration-3.0.0.jar ->package : org.springframework.boot.autoconfigure

#       |  |  |
#       V  V  V

#    Default logging level -> INFO
#    DEBUG -> Lot of information like Conditions Evaluation Report :
#                Positive Matches -> Things which were auto-configure for you
#                Negative Matches -> Things which did'nt get auto-configured
#
#    Postive Matches like -> DispatcherServletAutoConfiguration (Enabled for web application or REST Api) , ErrorMVCAutoConfiguration (Configuring default error page)

# ------------------------------------------------------------------------

# Profiles :

# Right now, the application is not making use of any profile at all -> Hence, default properties configured in application.properties are used

# To configure a profile of production ->

Spring.profiles.active = prod

# The values from default configuration and values from application-prod are merged together.
# Whatever is configured in application-prod, that specific profile has THE HIGHEST PRIORITY.

